@use 'sass:math';

@mixin radioButtonList() {
  $spacer: 10px;
  display: grid;
  grid-gap: $spacer;
  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
  justify-content: start;
  overflow-y: auto;
  padding: $spacer;
}

@mixin radioButtonListItem() {
  $grandparentSelector: &;
  $boxShadowPx: 0px 0px 7px 6px;

  // background colors
  $normalBackgroundColor: rgba(var(--borderColorPrimaryRgb),0.6);
  $hoverBackgroundColor: rgba(var(--borderColorPrimaryRgb),0.8);
  $selectedBackgroundColor: rgba(var(--themeColorPrimaryRgb),0.7);

  // text colors
  $normalTextColor: var(--backgroundColorPrimary);
  $hoverTextColor: var(--backgroundColorPrimary);
  $selectedTextColor: var(--backgroundColorPrimary);

  // border colors
  $normalBorderColor: var(--borderColorAccent);
  $hoverBorderColor: var(--borderColorPrimary);
  $selectedBorderColor: var(--themeColorPrimary);

  align-items: center;
  background: var(--backgroundColorPrimary);
  border: 1px solid $normalBorderColor;
  border-radius: 4px;
  color: $selectedTextColor;
  display: flex;
  justify-content: center;
  min-height: 36px;
  transition: border-color 0.2s ease;

  &:hover {
    border-color: $hoverBorderColor;
    cursor: pointer;

    & #{$grandparentSelector}__text {
      background: $hoverBackgroundColor;
      box-shadow: $boxShadowPx $hoverBackgroundColor;
      color: $hoverTextColor;
    }
  }
  
  &--selected {
    border-color: $selectedBorderColor;
    cursor: pointer;
  
    & #{$grandparentSelector}__text {
      background: $selectedBackgroundColor;
      box-shadow: $boxShadowPx $selectedBackgroundColor;
      color: $selectedTextColor;
      font-weight: bold;
      text-decoration: underline;
    }
  }

  &__input {
    display: none;
  }

  &__text {
    background: $normalBackgroundColor;
    box-shadow: $boxShadowPx $normalBackgroundColor;
    color: $normalTextColor;
  }
}

@mixin cursorPointerOnHover() {
  &:hover {
    cursor: pointer;
  }
}

@mixin iconButton($buttonDimension) {
  background: var(--backgroundColorPrimary);
  border: 1px solid var(--borderColorPrimary);
  border-radius: math.div($buttonDimension, 2);
  color: var(--textColorPrimary);
  height: $buttonDimension;
  width: $buttonDimension;

  &:hover {
    background: var(--backgroundColorAccent);
  }

  &:not([disabled]) {
    @include cursorPointerOnHover();
  }

  &--enabled {
    background: var(--themeColorPrimary);
    color: var(--backgroundColorPrimary);

    &:hover {
      background: var(--themeColorAccent);
    }
  }
}

@mixin overlayContainer() {
  background: var(--backgroundColorPrimary);
  border-radius: 6px;
  box-shadow: 0 0 8px 4px rgba(var(--borderColorPrimaryRgb), 0.8);
  padding: 10px;
}

@mixin forceWidth($width) {
  max-width: $width;
  min-width: $width;
}

@mixin forceHeight($height) {
  max-height: $height;
  min-height: $height;
}

@mixin overrideMatTextInputStyles($backgroundColor) {
  & ::ng-deep .mat-form-field-flex {
    background: var($backgroundColor);
    padding-top: 6px;
  }

  // override the label color for text input fields,
  // but only when not focused, and not if the field
  // is both touched and invalid (keep default error styling)
  & ::ng-deep .mat-form-field:not(.mat-focused):not(.ng-touched.ng-invalid) .mat-form-field-label {
    color: var(--textColorPrimary);
  }

  & ::ng-deep input::placeholder,
  & ::ng-deep textarea::placeholder {
    color: var(--textColorAccent);
  }
}

@mixin segmentBaseStyles($width) {
  background: var(--backgroundColorAccent);
  border: 1px solid var(--borderColorPrimary);
  border-radius: 6px;
  display: flex;
  flex-direction: column;
  justify-content: center;
  margin: 10px;
  max-width: $width;
  min-width: $width;
  padding: 6px 12px;

  &__nameFormField {
    margin-top: 2px;
    margin-bottom: -18px;
    min-width: 80px;

    & ::ng-deep .mat-form-field-flex {
      padding-top: 4px;
    }
  }

  &__numberFormField {
    margin: 0px 4px -12px;
    max-width: 95px;
    min-width: 95px;

    & ::ng-deep .mat-form-field-flex {
      padding-top: 6px;
    }
  }
}

// TODO this doesn't work
/**
* Mobile viewport bug fix
* 
* https://allthingssmitty.com/2020/05/11/css-fix-for-100vh-in-mobile-webkit
*/
@mixin mobileSafariViewportHeightFix() {
  min-height: 100vh;
  min-height: stretch; // fill-available;
}
