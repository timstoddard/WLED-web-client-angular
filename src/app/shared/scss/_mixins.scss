@use 'sass:math';

@import 'src/app/shared/scss/variables';

@mixin radioButtonList {
  $spacer: 10px;
  display: grid;
  grid-gap: $spacer;
  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
  justify-content: start;
  padding: $spacer;

  &__container {
    overflow-y: auto;
  }
}

@mixin radioButtonListItem {
  // select animation
  @keyframes onSelect {
    0% { transform: scale(1); }
    35% { transform: scale(1.08); }
    100% { transform: scale(1); }
  }

  // border colors
  $normalBorderColor: var(--borderColorAccent);
  $hoverBorderColor: var(--borderColorPrimary);
  $selectedBorderColor: var(--themeColorPrimary);

  // other vars
  $grandparentSelector: &;

  align-items: center;
  border: 1px solid $normalBorderColor;
  border-radius: 4px;
  cursor: pointer;
  display: flex;
  justify-content: center;
  min-height: 36px;
  user-select: none;
  transition: border-color 0.2s ease;

  &:hover {
    border-color: $hoverBorderColor;
  }

  &--selected {
    animation: onSelect 0.3s cubic-bezier(.25,.75,1,1);
    border-color: $selectedBorderColor;

    & #{$grandparentSelector}__text {
      font-weight: bold;
      text-decoration: underline;
    }
  }

  &__input {
    display: none;
  }
}

@mixin iconButton($buttonDimension) {
  background: var(--backgroundColorPrimary);
  border: 1px solid var(--borderColorPrimary);
  border-radius: math.div($buttonDimension, 2);
  color: var(--textColorPrimary);
  height: $buttonDimension;
  width: $buttonDimension;

  &:hover {
    background: var(--backgroundColorAccent);
  }

  &:not([disabled]) {
    cursor: pointer;
  }

  &--enabled {
    background: var(--themeColorPrimary);
    color: var(--backgroundColorPrimary);

    &:hover {
      background: var(--themeColorAccent);
    }
  }
}

@mixin forceWidth($width) {
  max-width: $width;
  min-width: $width;
}

@mixin forceHeight($height) {
  max-height: $height;
  min-height: $height;
}

@mixin overrideMatTextInputStyles($backgroundColor) {
  & ::ng-deep .mat-form-field-flex {
    background: var($backgroundColor);
    padding-top: 6px;
  }

  // override the label color for text input fields,
  // but only when not focused, and not if the field
  // is both touched and invalid (keep default error styling)
  & ::ng-deep .mat-form-field:not(.mat-focused):not(.ng-touched.ng-invalid) .mat-form-field-label {
    color: var(--textColorPrimary);
  }

  & ::ng-deep input::placeholder,
  & ::ng-deep textarea::placeholder {
    color: var(--textColorAccent);
  }
}

@mixin segmentHostBaseStyles() {
  max-width: 600px;
  width: 90%;
}

@mixin segmentBaseStyles() {
  background: var(--backgroundColorAccent);
  border: 1px solid var(--borderColorPrimary);
  border-radius: 6px;
  display: flex;
  flex-direction: column;
  justify-content: center;
  margin: 10px;
  padding: 4px 20px;

  // TODO audit usage
  &__nameFormField {
    margin-top: 2px;
    margin-bottom: -18px;
    min-width: 80px;

    & ::ng-deep .mat-form-field-flex {
      padding-top: 4px;
    }
  }

  // TODO remove?
  // &__numberFormField {
  //   font-size: 18px;
  //   margin: 0px 4px -12px;
  //   max-width: 70px;
  //   min-width: 70px;

  //   & ::ng-deep .mat-form-field-flex {
  //     padding-top: 6px;
  //   }
  // }
}

// TODO this doesn't work
/**
* Mobile viewport bug fix
* 
* https://allthingssmitty.com/2020/05/11/css-fix-for-100vh-in-mobile-webkit
*/
@mixin mobileSafariViewportHeightFix {
  min-height: 100vh;
  min-height: stretch; // fill-available;
}

@mixin settingsPageContainer {
  align-items: center;
  display: flex;
  flex-direction: column;
}


// Marching ants border animation.

$antLength: 20px;
$antWidth: 2px;

@keyframes marchingAnts {
  0% {
    background-position:
      0 0,
      0 100%,
      0 0,
      100% 0;
  }
  100% {
    background-position:
      2 * $antLength 0,
      -2 * $antLength 100%,
      0 -2 * $antLength,
      100% 2 * $antLength;
  }
}

@mixin marchingAntsBorder($speed) {
  $fromColor: var(--borderColorPrimary);
  $toColor: transparent;

  animation: $speed linear marchingAnts infinite;
  background-image:
    linear-gradient(to right, $fromColor 50%, $toColor 50%),
    linear-gradient(to right, $fromColor 50%, $toColor 50%),
    linear-gradient(to bottom, $fromColor 50%, $toColor 50%),
    linear-gradient(to bottom, $fromColor 50%, $toColor 50%);
  background-position:
    0 0,
    0 100%,
    0 0,
    100% 0;
  background-repeat:
    repeat-x,
    repeat-x,
    repeat-y,
    repeat-y;
  background-size:
    $antLength $antWidth,
    $antLength $antWidth,
    $antWidth $antLength,
    $antWidth $antLength;
}

@mixin mobile-layout {
  @media (max-width: 740px) {
    @content;
  }
}

@mixin textOverflowEllipsis {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// TODO use this everywhere
@mixin flex-center {
  align-items: center;
  display: flex;
  justify-content: center;
}

@mixin shared-box-shadow($inset: false) {
  @if $inset {
    box-shadow: inset 0 0 8px 0 rgba(var(--borderColorPrimaryRgb), 0.8);
  } @else {
    box-shadow: 0px 3px 10px 3px rgba(var(--borderColorPrimaryRgb), 0.9);
  }
}

@mixin view-container-base {
  @include shared-box-shadow(true);
  border: 1px solid var(--borderColorPrimary);
  border-radius: 6px;
}

@mixin main-view-container {
  @include view-container-base;
  margin: $mainViewEdgeSpacing;
  overflow-x: hidden;
  padding: 10px 6px;
  text-align: center;
}

@mixin overlay-container {
  @include shared-box-shadow(false);
  background: var(--backgroundColorPrimary);
  border: 1px solid var(--borderColorPrimary);
  border-radius: 6px;
  padding: 10px;
}
